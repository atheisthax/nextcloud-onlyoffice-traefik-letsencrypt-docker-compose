services:
  postgres-nextcloud:
    container_name: nextcloud_db
    image: ${NEXTCLOUD_POSTGRES_IMAGE_TAG}
    volumes:
      - ./nextcloud/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${NEXTCLOUD_DB_NAME}
      POSTGRES_USER: ${NEXTCLOUD_DB_USER}
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
    networks:
      - nextcloud-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${NEXTCLOUD_DB_NAME}", "-U", "${NEXTCLOUD_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  redis-nextcloud:
    container_name: nextcloud_redis
    image: ${NEXTCLOUD_REDIS_IMAGE_TAG}
    command: ["redis-server", "--requirepass", "$NEXTCLOUD_REDIS_PASSWORD"]
    volumes:
      - ./nextcloud/redis-data:/data
    networks:
      - nextcloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  nextcloud:
    container_name: nextcloud_app
    hostname: nextcloud
    image: ${NEXTCLOUD_IMAGE_TAG}
    volumes:
      - ./nextcloud/data:${DATA_PATH}
    environment:
      TZ: ${NEXTCLOUD_TIMEZONE}
      POSTGRES_HOST: postgres-nextcloud
      DB_PORT: 5432
      POSTGRES_DB: ${NEXTCLOUD_DB_NAME}
      POSTGRES_USER: ${NEXTCLOUD_DB_USER}
      POSTGRES_PASSWORD: ${NEXTCLOUD_DB_PASSWORD}
      REDIS_HOST: redis-nextcloud
      REDIS_HOST_PORT: 6379
      REDIS_HOST_PASSWORD: ${NEXTCLOUD_REDIS_PASSWORD}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USERNAME}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_HOSTNAME}
      OVERWRITECLIURL: ${NEXTCLOUD_URL}
      OVERWRITEPROTOCOL: https
      OVERWRITEHOST: ${NEXTCLOUD_HOSTNAME}
      TRUSTED_PROXIES: 172.16.0.0/12 192.168.0.0/16 10.0.0.0/8 fc00::/7 fe80::/10 2001:db8::/32
    networks:
      - nextcloud-network
      - onlyoffice-network
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on the specific hostname for Nextcloud
      - "traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.nextcloud.service=nextcloud"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      # Enable TLS on this router
      - "traefik.http.routers.nextcloud.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.nextcloud.loadbalancer.passhostheader=true"
      # Apply middlewares for security headers and compression
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-redirectregex1,nextcloud-redirectregex2,compresstraefik,nextcloud-securityheaders"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Settings for the first redirect regex middleware
      - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.regex=https?://([^/]*)/.well-known/(card|cal)dav"
      - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.replacement=https://$${1}/remote.php/dav/"
      # Settings for the second redirect regex middleware
      - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.regex=https?://([^/]*)(/.well-known[^#]*)"
      - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.replacement=https://$${1}/index.php$${2}"
      # Security headers settings specifically for Nextcloud
      - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsPreload=true"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"

    restart: unless-stopped
    depends_on:
      postgres-nextcloud:
        condition: service_healthy
      redis-nextcloud:
        condition: service_healthy
      traefik:
        condition: service_healthy

  nextcloud-cron:
    container_name: nextcloud_cron
    image: ${NEXTCLOUD_IMAGE_TAG}
    entrypoint: /cron.sh
    volumes:
      - ./nextcloud/data:${DATA_PATH}
    networks:
      - nextcloud-network

  postgres-onlyoffice:
    container_name: onlyoffice_db
    image: ${ONLYOFFICE_DOCUMENT_POSTGRES_IMAGE_TAG}
    volumes:
      - ./onlyoffice/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${ONLYOFFICE_DOCUMENT_DB_NAME}
      POSTGRES_USER: ${ONLYOFFICE_DOCUMENT_DB_USER}
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - onlyoffice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  redis-onlyoffice:
    container_name: onlyoffice_redis
    hostname: redis-onlyoffice
    image: ${ONLYOFFICE_DOCUMENT_REDIS_IMAGE_TAG}
    volumes:
      - ./onlyoffice/redis-data:/data
    networks:
      - onlyoffice-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  rabbitmq-onlyoffice:
    container_name: onlyoffice_rabbitmq
    hostname: rabbitmq-onlyoffice
    image: ${RABBITMQ_IMAGE_TAG}
    volumes:
      - ./onlyoffice/rabbitmq-data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - onlyoffice-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    restart: unless-stopped

  onlyoffice:
    container_name: onlyoffice_app
    hostname: onlyoffice
    image: ${ONLYOFFICE_DOCUMENT_IMAGE_TAG}
    volumes:
      - ./onlyoffice/data:/var/www/onlyoffice/Data
      - ./onlyoffice/log:/var/log/onlyoffice
      - ./onlyoffice/cache-files:/var/lib/onlyoffice/documentserver/App_Data/cache/files
      - ./onlyoffice/public-files:/var/www/onlyoffice/documentserver-example/public/files
      - ./onlyoffice/fonts:/usr/share/fonts
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres-onlyoffice
      DB_PORT: 5432
      DB_NAME: ${ONLYOFFICE_DOCUMENT_DB_NAME}
      DB_USER: ${ONLYOFFICE_DOCUMENT_DB_USER}
      DB_PWD: ${ONLYOFFICE_DOCUMENT_DB_PASSWORD}
      AMQP_TYPE: rabbitmq
      AMQP_URI: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq-onlyoffice/?frameMax=0
      REDIS_SERVER_HOST: redis-onlyoffice
      REDIS_SERVER_PORT: 6379
      JWT_ENABLED: true
      JWT_SECRET: ${ONLYOFFICE_DOCUMENT_JWT_SECRET}
      JWT_HEADER: Authorization
      JWT_IN_BODY: 'true'
    networks:
      - onlyoffice-network
      - nextcloud-network
      - traefik-network
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on the specific hostname for OnlyOffice Document Server
      - "traefik.http.routers.onlyoffice.rule=Host(`${ONLYOFFICE_DOCUMENT_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.onlyoffice.service=onlyoffice"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.onlyoffice.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.onlyoffice.loadbalancer.server.port=80"
      # Enable TLS on this router
      - "traefik.http.routers.onlyoffice.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.onlyoffice.tls.certresolver=letsencrypt"
      # Apply middlewares for compression and security headers
      - "traefik.http.routers.onlyoffice.middlewares=compresstraefik,onlyoffice-header"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Security headers specifically for OnlyOffice Document Server
      - "traefik.http.middlewares.onlyoffice-header.headers.referrerPolicy=no-referrer"
      - "traefik.http.middlewares.onlyoffice-header.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.onlyoffice-header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.onlyoffice-header.headers.stsPreload=true"
      - "traefik.http.middlewares.onlyoffice-header.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.onlyoffice-header.headers.browserXssFilter=true"
      - "traefik.http.middlewares.onlyoffice-header.headers.customRequestHeaders.X-Forwarded-Proto=https"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres-onlyoffice:
        condition: service_healthy
      rabbitmq-onlyoffice:
        condition: service_healthy
      nextcloud:
        condition: service_healthy

  traefik:
    container_name: nextcloud_proxy
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      # Set the log level (DEBUG, INFO, WARN, ERROR)
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      # Enable the built-in API and web-based dashboard
      - "--api.dashboard=true"
      # traefik web interface can be accessed via 8080 port
      - "--api.insecure=true"
      # Enable the /ping endpoint so we can health-check Traefik
      - "--ping=true"
      # Assign the /ping endpoint to a dedicated entry point on port 8082
      - "--ping.entrypoint=ping"
      - "--entrypoints.ping.address=:8082"
      # Define the secure (HTTPS) entry point on port 443
      - "--entrypoints.websecure.address=:443"
      # HTTP -> HTTPS redirect at entrypoint level
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Enable the Docker provider to detect containers and their labels
      - "--providers.docker=true"
      # Point Traefik to the Docker socket
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Prevent automatic exposure of all containers; only expose containers
      # with "traefik.enable=true"
      - "--providers.docker.exposedbydefault=false"
      # Use ACME (Let's Encrypt) to generate/renew certificates via TLS challenge
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Uncomment string below to use staging letsencrypt certificate (allows you to try for many times)
      #- "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # The email address used by Let's Encrypt for renewal notices
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      # The file where ACME certificates are stored inside the container
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # Enable Prometheus metrics
      - "--metrics.prometheus=true"
      # Configure Prometheus histogram buckets
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      # Check for newer Traefik versions and optionally log that info
      - "--global.checknewversion=true"
      # Disable sending anonymous usage data to the Traefik maintainers
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "8080:8080"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

networks:
  traefik-network:
    name: traefik-network
  nextcloud-network:
    name: nextcloud-network
  onlyoffice-network:
    name: onlyoffice-network
